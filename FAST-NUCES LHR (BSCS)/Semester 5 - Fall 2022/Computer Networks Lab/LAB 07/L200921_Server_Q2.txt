//L200921 Aisha Muhammad Nawaz BSCS Section 5E Lab 7 Code.
/*
        TCP_Server. This Program will create the Server side for TCP_Socket Programming.
        It will receive the data from the client and then send data back to client.
*/

#include <stdio.h> 
#include <string.h> 
#include <sys/socket.h> //socket
#include <arpa/inet.h> //inet_addr
#include <pthread.h>
#include <time.h>
#include <fcntl.h> // for open
#include <unistd.h> // for close

char client_message[2000];
char server_message[2000]; 
int clientNumber=0;
void *fun2 (void*arg) //Do not let client connect 
{
int client_sock=(int) arg;
memset(server_message,'\0',sizeof(server_message));

printf("Can't let this client with client_sock %i stay connected. Server Full!\n",client_sock);
  strcpy(server_message,"Server Full");
        //Send the message back to client. 
     if (send(client_sock, server_message, strlen(server_message),0)<0)
        {
                printf("Send Failed. Error!!!!!\n");
                return NULL;
        }
        clientNumber--;
        close(client_sock);
        pthread_exit(NULL);
}
void *fun1(void *arg)
{
int client_sock=(int) arg;
        
        while (1)
        {
        
         memset(server_message,'\0',sizeof(server_message));
         memset(client_message,'\0',sizeof(client_message));
           //Receive the message from the client (First: Name & CNIC) 
        if (recv(client_sock, client_message, sizeof(client_message),0) < 0)
        {
                printf("Receive Failed. Error!!!!!\n");
                return NULL;
        }
        if(client_message)
             {
printf("Client with client_sock: %i has sent: %s\n",client_sock,client_message);  
 if (strcmp(client_message,"DISCONNECT")==0)
 {
 printf("Client with client_sock: %i wishes to disconnect!\n",client_sock);
break;
  }     
    else   
       strcpy(server_message,client_message);
        //Send the message back to client. 
     if (send(client_sock, server_message, strlen(server_message),0)<0)
        {
                printf("Send Failed. Error!!!!!\n");
                return NULL;
        }}
        else
        printf("Client with client_sock %i Sent Nothing!\n",client_sock);
   }
   clientNumber--;
   close(client_sock);
   pthread_exit(NULL); 
}

int main(void)
{
int client_sock=0;
int socket_desc, client_size,tid=0; 
struct sockaddr_in server_addr, client_addr;         //SERVER ADDR will have all the server address


        //Cleaning the Buffers
        memset(server_message,'\0',sizeof(server_message));
        memset(client_message,'\0',sizeof(client_message));
        
        //Creating Socket        
        socket_desc = socket(AF_INET, SOCK_STREAM, 0);        
        if(socket_desc < 0)
        {
                printf("Could Not Create Socket. Error!!!!!\n");
                return -1;
        }       
        printf("Socket Created\n");
        
        //Binding IP and Port to socket
        
        server_addr.sin_family = AF_INET;       /* Address family = Internet */
        server_addr.sin_port = htons(2000);    // Set port number, using htons function to use proper byte order */
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");    /* Set IP address to localhost */
		
		// BINDING FUNCTION      
 if(bind(socket_desc, (struct sockaddr*)&server_addr, sizeof(server_addr))<0)// Bind the address struct to the socket.  
 //bind() passes file descriptor, the address structure,and the length of the address structure
        {
                printf("Bind Failed. Error!!!!!\n");
                return -1;
        }        
        printf("Bind Done\n");

 printf("\nListening for Incoming Connections.....\n");
  //Put the socket into Listening State        
        if(listen(socket_desc, 1) < 0)   //This listen() call tells the socket to listen to the incoming connections.
     // The listen() function places all incoming connection into a "backlog queue" until accept() call accepts the connection.
        {
                printf("Listening Failed. Error!!!!!\n");
                return -1;
        }  

        while (1)
   { //So server keeps going.
        pthread_t thread1; 
   
  
 
       //Accept the incoming Connections
       client_size = sizeof(client_addr);
       client_sock = accept(socket_desc, (struct sockaddr*)&client_addr, &client_size); // heree particular client k liye new socket create kr rhaa ha
          if (client_sock < 0)
        {
                printf("Accept Failed. Error!!!!!!\n");
                return -1;
        }
   printf("\nClient Connected with IP: %s and Port No: %i\n",inet_ntoa(client_addr.sin_addr),ntohs(client_addr.sin_port));
   
   clientNumber++;
//inet_ntoa() function converts the Internet host address in, given in network byte order, to a string in IPv4 dotted-decimal notation
       
       if (clientNumber>3) //Incase server full
   {
      int ret1 = pthread_create(&thread1,NULL,fun2,(void*)client_sock);
        if(ret1!=0)
        {
                printf("Thread 1 Creation Failed\n");
        }
   }
   else
   {
        int ret1 = pthread_create(&thread1,NULL,fun1,(void*)client_sock);
        if(ret1!=0)
        {
                printf("Thread 1 Creation Failed\n");
        }
 
    }
   }
      
        //Closing the Socket        
        close(client_sock);
        close(socket_desc);
        return 0;       
}